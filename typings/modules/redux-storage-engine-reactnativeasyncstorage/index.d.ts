// Generated by typings
// Source: https://raw.githubusercontent.com/andrew-w-ross/typings-redux/master/redux.d.ts
declare module '~redux-storage-engine-reactnativeasyncstorage~redux-storage~redux' {
module redux {
	//This should be extended
	export interface IAction {
		type: string | number;
	}

	export interface IActionGeneric<TPayload> extends IAction {
		payload?: TPayload;
		error?: Error;
		meta?: any;
	}

	export interface IReducer<TState> {
		(state: TState, action: IAction): TState;
	}

	export interface IReducerMap {
		[key: string]: IReducerMap | IReducer<any>
	}

	export interface IDispatch {
		(action: IAction): IAction;
	}

	export interface IMiddlewareStore<TState> {
		getState(): TState;

		dispatch: IDispatch;
	}

	export interface IStore<TState> extends IMiddlewareStore<TState> {
		subscribe(listener: (state: TState) => any): () => void;

		replaceReducer(nextReducer: IReducer<TState>): void;
	}

	export interface IMiddleware<State> {
		(middlewareStore: IMiddlewareStore<State>): (next: IDispatch) => IDispatch;
	}

	export interface ICreateStoreGeneric<TState> {
		(reducer: IReducer<TState>, initialState?: TState): IStore<TState>;
	}

	export interface IStoreEnhancerGeneric<TState> {
		(createStore: ICreateStoreGeneric<TState>): ICreateStoreGeneric<TState>;
	}

	export function createStore<TState>(reducer: IReducer<TState>, initialState?: TState): IStore<TState>;

	export function combineReducers(reducers: IReducerMap): IReducer<any>;
	export function combineReducers<TState>(reducers: IReducerMap): IReducer<TState>;

	export function applyMiddleware<TState>(...middlewares: IMiddleware<TState>[]): IStoreEnhancerGeneric<TState>;

	export function bindActionCreators<TActionCreator extends Function | { [key: string]: Function }>(actionCreators: TActionCreator, dispatch: IDispatch): TActionCreator;

	export function compose<TArg>(...functions: { (arg: TArg): TArg }[]): (arg: TArg) => TArg;
	export function compose(...functions: { (arg: any): any }[]): (arg: any) => any;
}

export = redux;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/asvetliakov/typings-redux-storage/master/index.d.ts
declare module '~redux-storage-engine-reactnativeasyncstorage~redux-storage' {
import {IStore, IReducer, IMiddleware} from '~redux-storage-engine-reactnativeasyncstorage~redux-storage~redux';

/**
 * Action constants
 */
export const LOAD: string;
export const SAVE: string;

/**
 * Storage engine interface
 */
export interface StorageEngine {
    /**
     * Load
     */
    load(): Promise<any>;
    /**
     * Save
     * @param state
     */
    save(state: any): Promise<any>
}

export interface StateMerger {
    (oldState: any, newState: any): any; 
}

/**
 * Storage reducer
 * @param reducer
 * @param merger
 */
export function reducer<TState>(reducer: IReducer<TState>, merger?: StateMerger): IReducer<TState>;

/**
 * Create storage middleware
 * @param engine
 * @param actionBlacklist
 * @param actionWhitelist
 */
export function createMiddleware<TState>(engine: StorageEngine, actionBlacklist?: string[], actionWhitelist?: string[]): IMiddleware<TState>;

/**
 * Loader interface
 */
interface Loader<TState> extends Function {
    (store: IStore<TState>): Promise<any>
}

/**
 * Create state loader
 * @param engine
 */
export function createLoader<TState>(engine: StorageEngine): Loader<TState>;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/asvetliakov/typings-redux-storage-engine-localstorage/866700830567ed3e2f7c64654d101274369bd35c/index.d.ts
declare module 'redux-storage-engine-reactnativeasyncstorage' {
import {StorageEngine} from '~redux-storage-engine-reactnativeasyncstorage~redux-storage';

export interface ReactNativeAsyncStorageEngine extends StorageEngine {}

/**
 * Create React Native async storage
 * @param key React Native async storage key
 */
export default function createEngine(key: string): ReactNativeAsyncStorageEngine;
}
